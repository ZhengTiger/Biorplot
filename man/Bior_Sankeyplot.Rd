% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/General_Plots.R
\name{Bior_SankeyPlot}
\alias{Bior_SankeyPlot}
\title{Sankey Plot}
\usage{
Bior_SankeyPlot(
  Links,
  Nodes,
  Source = "IDsource",
  Target = "IDtarget",
  Value = "Value",
  NodeID = "name",
  NodeGroup = NodeID,
  LinkGroup = NULL,
  units = "",
  colourScale = JS("d3.scaleOrdinal(d3.schemeCategory20);"),
  fontSize = 7,
  fontFamily = NULL,
  nodeWidth = 15,
  nodePadding = 10,
  margin = NULL,
  height = NULL,
  width = NULL,
  iterations = 32,
  sinksRight = TRUE,
  Group.order = NULL,
  Group.colour = NULL,
  Nodes.order = NULL,
  Nodes.colour = NULL
)
}
\arguments{
\item{Links}{a data frame object with the links between the nodes. It should
have include the \code{Source} and \code{Target} for each link. An optional
\code{Value} variable can be included to specify how close the nodes are to
one another.}

\item{Nodes}{a data frame containing the node id and properties of the nodes.
If no ID is specified then the nodes must be in the same order as the
\code{Source} variable column in the \code{Links} data frame. Currently only
grouping variable is allowed.}

\item{Source}{character string naming the network source variable in the
\code{Links} data frame.}

\item{Target}{character string naming the network target variable in the
\code{Links} data frame.}

\item{Value}{character string naming the variable in the \code{Links} data
frame for how far away the nodes are from one another.}

\item{NodeID}{character string specifying the node IDs in the \code{Nodes}.
data frame. Must be 0-indexed.}

\item{NodeGroup}{character string specifying the node groups in the
\code{Nodes}. Used to color the nodes in the network.}

\item{LinkGroup}{character string specifying the groups in the
\code{Links}. Used to color the links in the network.}

\item{units}{character string describing physical units (if any) for Value}

\item{colourScale}{character string specifying the categorical colour
scale for the nodes. See
\url{https://github.com/d3/d3/blob/master/API.md#ordinal-scales}.}

\item{fontSize}{numeric font size in pixels for the node text labels.}

\item{fontFamily}{font family for the node text labels.}

\item{nodeWidth}{numeric width of each node.}

\item{nodePadding}{numeric essentially influences the width height.}

\item{margin}{an integer or a named \code{list}/\code{vector} of integers
for the plot margins. If using a named \code{list}/\code{vector},
the positions \code{top}, \code{right}, \code{bottom}, \code{left}
are valid.  If a single integer is provided, then the value will be
assigned to the right margin. Set the margin appropriately
to accomodate long text labels.}

\item{height}{numeric height for the network graph's frame area in pixels.}

\item{width}{numeric width for the network graph's frame area in pixels.}

\item{iterations}{numeric. Number of iterations in the diagramm layout for
computation of the depth (y-position) of each node. Note: this runs in the
browser on the client so don't push it too high.}

\item{sinksRight}{boolean. If \code{TRUE}, the last nodes are moved to the
right border of the plot.}

\item{Group.order}{Set Group order}

\item{Group.colour}{Set Group colour}

\item{Nodes.order}{Set nodes order}

\item{Nodes.colour}{Set Nodes colour}
}
\description{
Create a sankey plot.
}
\examples{
# Examples 1
links <- data.frame(
  Source=c("C","A", "B", "E", "D"),
  Target=c("b","c", "a", "e", "d"),
  Value=c(1, 2, 1, 4, 5)
 )
nodes <- data.frame(
  name = c("A", "B", "C", "D", "E", "a", "b", "c", "d", "e")
 )
links$IDsource <- match(links$Source, nodes$name) -1
links$IDtarget <- match(links$Target, nodes$name) -1
Nodes.colour <- c("#1F77B4B2","#FF7F0EB2","#2CA02CB2","#D62728B2","#9467BDB2",
                  "#8C564BB2","#E377C2B2","#7F7F7FB2","#BCBD22B2","#17BECFB2")

p <- Bior_SankeyPlot(links, nodes, Nodes.colour=Nodes.colour, Nodes.order = nodes$name,
                     fontSize=20,iterations=0)
p
# save plot
# saveNetwork(p,"sankey.html")
# webshot("sankey.html" , "sankey.pdf")


# Examples 2
links <- data.frame(
  Source = c(rep(c("A_1","B_1","C_1","D_1"),each=4), rep(c("A_2","B_2","C_2","D_2"),each=4)),
  Target = c(rep(c("A_2","B_2","C_2","D_2"),4), rep(c("A_3","B_3","C_3","D_3"),4)),
  Value = c(0.4,0.4,0.1,0.1, 0.1,0.8,0.05,0.05, 0.05,0.05,0.8,0.1, 0.05,0.1,0.05,0.8,
            0.4,0.4,0.1,0.1, 0.1,0.8,0.05,0.05, 0.05,0.05,0.8,0.1, 0.05,0.1,0.05,0.8)
)
links$Group <- ""
links$Group[which(links$Value > 0.5)] <- "Type1"
links$Group[which(links$Value > 0.1 & links$Value <= 0.5)] <- "Type2"
links$Group[which(links$Value <= 0.1)] <- "Type3"
nodes <- data.frame(
  name = c("A_1","B_1","C_1","D_1","A_2","B_2","C_2","D_2","A_3","B_3","C_3","D_3")
)
links$IDsource <- match(links$Source, nodes$name) - 1
links$IDtarget <- match(links$Target, nodes$name) - 1
Group.order <- c("Type1", "Type2", "Type3")
Group.colour <- c("#6860ff","#e489dc","#d0d5da")
Nodes.order <- nodes$name
Nodes.colour <- rep(c('#ffda11', '#f68d45', '#26d5ff', '#f05a9e'),3)

Bior_SankeyPlot(
  Links = links, Nodes = nodes, Source = "IDsource", Target = "IDtarget",
  Value = "Value", NodeID = "name", colourScale = colourScale, LinkGroup="Group",
  fontSize = 20, iterations=0,
  Group.order = Group.order, Group.colour = Group.colour,
  Nodes.order = Nodes.order, Nodes.colour = Nodes.colour)

}
